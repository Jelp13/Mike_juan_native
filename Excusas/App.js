import React, { useState } from 'react';
import {
  StyleSheet,
  Text,
  View,
  TouchableOpacity,
  ScrollView,
  Alert,
  Share,
} from 'react-native';

const excusasDatabase = {
  trabajo: [
    "Mi perro se comi√≥ mi laptop y tuve que llevarlo al veterinario urgentemente",
    "Se me cay√≥ el caf√© en el teclado y ahora solo escribe en chino",
    "Mi vecino decidi√≥ practicar trompeta a las 5 AM y no pude dormir",
    "El GPS me llev√≥ a otra ciudad con el mismo nombre",
    "Mi despertador cambi√≥ a hora de Jap√≥n solo",
    "Un mapache se meti√≥ a mi casa y destruy√≥ mi uniforme",
    "Mi internet tiene crisis existencial y solo carga memes",
    "El uber que ped√≠ era en realidad una ambulancia"
  ],
  
  tareas: [
    "Mi hermano peque√±o us√≥ mi tarea para entrenar origami",
    "Se me olvid√≥ que exist√≠a hasta que me levant√©",
    "Mi computadora se enamor√≥ de un virus y ahora est√°n de luna de miel",
    "Confund√≠ la fecha porque vivo en el a√±o 2019 mentalmente",
    "Mi gato pis√≥ Ctrl+A y Delete mientras yo dorm√≠a",
    "El archivo se fue de vacaciones a la papelera de reciclaje",
    "Cre√≠ que era opcional como el gimnasio",
    "Mi WiFi tiene depresi√≥n estacional"
  ],
  
  citas: [
    "Mi hor√≥scopo dice que hoy debo evitar las decisiones importantes",
    "Mi planta favorita est√° enferma y necesita terapia emocional",
    "Tengo que acompa√±ar a mi goldfish a su primera cita",
    "Mi sombra me abandon√≥ y la estoy buscando",
    "Estoy en una relaci√≥n muy seria con mi cama",
    "Mi reflejo en el espejo no quiere salir hoy",
    "Tengo que ense√±arle a mi tortuga a usar redes sociales",
    "Mi alter ego tiene una cita m√°s importante"
  ],
  
  ejercicio: [
    "Mis m√∫sculos est√°n en huelga sindical",
    "El gimnasio est√° cerrado por invasi√≥n de ping√ºinos",
    "Mis tenis se divorciaron y est√°n en terapia de pareja",
    "Estoy ahorrando energ√≠a para el apocalipsis zombie",
    "Mi entrenador personal se fue a buscar pok√©mones",
    "El aire acondicionado del gym se enamor√≥ de m√≠ y no me deja ir",
    "Mis articulaciones est√°n celebrando su jubilaci√≥n anticipada",
    "Tengo alergia al sudor propio"
  ]
};

export default function App() {
  const [excusaActual, setExcusaActual] = useState('¬°Presiona una categor√≠a para generar tu excusa!');
  const [categoriaSeleccionada, setCategoriaSeleccionada] = useState('');
  const [contadorExcusas, setContadorExcusas] = useState(0);
  const [favoritas, setFavoritas] = useState([]);

  const generarExcusa = (categoria) => {
    const excusas = excusasDatabase[categoria];
    const excusaAleatoria = excusas[Math.floor(Math.random() * excusas.length)];
    setExcusaActual(excusaAleatoria);
    setCategoriaSeleccionada(categoria);
    setContadorExcusas(contadorExcusas + 1);
  };

  const compartirExcusa = async () => {
    if (excusaActual === '¬°Presiona una categor√≠a para generar tu excusa!') {
      Alert.alert('¬°Oops!', 'Primero genera una excusa para compartir');
      return;
    }

    try {
      await Share.share({
        message: `Mi excusa del d√≠a: "${excusaActual}" ü§∑‚Äç‚ôÇÔ∏è\n\nGenerado con ExcusApp`,
        title: 'Mi Excusa Creativa'
      });
    } catch (error) {
      Alert.alert('Error', 'No se pudo compartir la excusa');
    }
  };

  const agregarAFavoritas = () => {
    if (excusaActual === '¬°Presiona una categor√≠a para generar tu excusa!') {
      Alert.alert('¬°Oops!', 'Primero genera una excusa para guardar');
      return;
    }

    if (favoritas.includes(excusaActual)) {
      Alert.alert('¬°Ya existe!', 'Esta excusa ya est√° en tus favoritas');
      return;
    }

    setFavoritas([...favoritas, excusaActual]);
    Alert.alert('¬°Guardada!', 'Excusa agregada a favoritas');
  };

  return (
    <View style={styles.container}>
      {/* Header */}
      <View style={styles.header}>
        <Text style={styles.title}>üé≠ ExcusApp</Text>
        <Text style={styles.subtitle}>Generador de Excusas Creativas</Text>
        <Text style={styles.contador}>Excusas generadas: {contadorExcusas}</Text>
      </View>

      {/* √Årea de la excusa */}
      <View style={styles.excusaContainer}>
        <Text style={styles.excusaTexto}>{excusaActual}</Text>
        {categoriaSeleccionada && (
          <Text style={styles.categoria}>Categor√≠a: {categoriaSeleccionada}</Text>
        )}
      </View>

      {/* Botones de acci√≥n */}
      {excusaActual !== '¬°Presiona una categor√≠a para generar tu excusa!' && (
        <View style={styles.accionesContainer}>
          <TouchableOpacity style={styles.botonAccion} onPress={compartirExcusa}>
            <Text style={styles.textoBotonAccion}>üì§ Compartir</Text>
          </TouchableOpacity>
          <TouchableOpacity style={styles.botonAccion} onPress={agregarAFavoritas}>
            <Text style={styles.textoBotonAccion}>‚≠ê Favorita</Text>
          </TouchableOpacity>
        </View>
      )}

      {/* Categor√≠as */}
      <ScrollView style={styles.categoriasContainer}>
        <Text style={styles.categoriasTitle}>Elige tu situaci√≥n:</Text>
        
        <TouchableOpacity 
          style={styles.categoriaBoton} 
          onPress={() => generarExcusa('trabajo')}
        >
          <Text style={styles.categoriaTexto}>üíº Trabajo/Estudio</Text>
        </TouchableOpacity>

        <TouchableOpacity 
          style={styles.categoriaBoton} 
          onPress={() => generarExcusa('tareas')}
        >
          <Text style={styles.categoriaTexto}>üìö Tareas</Text>
        </TouchableOpacity>

        <TouchableOpacity 
          style={styles.categoriaBoton} 
          onPress={() => generarExcusa('citas')}
        >
          <Text style={styles.categoriaTexto}>üíï Citas</Text>
        </TouchableOpacity>

        <TouchableOpacity 
          style={styles.categoriaBoton} 
          onPress={() => generarExcusa('ejercicio')}
        >
          <Text style={styles.categoriaTexto}>üèÉ‚Äç‚ôÇÔ∏è Ejercicio</Text>
        </TouchableOpacity>
      </ScrollView>

      {/* Favoritas */}
      {favoritas.length > 0 && (
        <View style={styles.favoritasContainer}>
          <Text style={styles.favoritasTitle}>‚≠ê Favoritas: {favoritas.length}</Text>
        </View>
      )}
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f0f8ff',
  },
  header: {
    alignItems: 'center',
    paddingVertical: 20,
    backgroundColor: '#4a90e2',
    borderBottomLeftRadius: 20,
    borderBottomRightRadius: 20,
    marginBottom: 20,
  },
  title: {
    fontSize: 32,
    fontWeight: 'bold',
    color: 'white',
    marginBottom: 5,
  },
  subtitle: {
    fontSize: 16,
    color: 'white',
    opacity: 0.9,
  },
  contador: {
    fontSize: 12,
    color: 'white',
    opacity: 0.8,
    marginTop: 5,
  },
  excusaContainer: {
    backgroundColor: 'white',
    margin: 20,
    padding: 20,
    borderRadius: 15,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  excusaTexto: {
    fontSize: 18,
    textAlign: 'center',
    lineHeight: 26,
    color: '#333',
  },
  categoria: {
    textAlign: 'center',
    marginTop: 10,
    fontSize: 12,
    color: '#666',
    fontStyle: 'italic',
  },
  accionesContainer: {
    flexDirection: 'row',
    justifyContent: 'space-around',
    marginHorizontal: 20,
    marginBottom: 20,
  },
  botonAccion: {
    backgroundColor: '#ff6b6b',
    paddingVertical: 10,
    paddingHorizontal: 20,
    borderRadius: 25,
  },
  textoBotonAccion: {
    color: 'white',
    fontWeight: 'bold',
    fontSize: 14,
  },
  categoriasContainer: {
    flex: 1,
    paddingHorizontal: 20,
  },
  categoriasTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    marginBottom: 15,
    textAlign: 'center',
    color: '#333',
  },
  categoriaBoton: {
    backgroundColor: 'white',
    padding: 15,
    marginVertical: 8,
    borderRadius: 10,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 2,
    elevation: 2,
  },
  categoriaTexto: {
    fontSize: 16,
    textAlign: 'center',
    fontWeight: '600',
    color: '#4a90e2',
  },
  favoritasContainer: {
    backgroundColor: '#ffe066',
    padding: 10,
    alignItems: 'center',
  },
  favoritasTitle: {
    fontSize: 14,
    fontWeight: 'bold',
    color: '#333',
  },
});